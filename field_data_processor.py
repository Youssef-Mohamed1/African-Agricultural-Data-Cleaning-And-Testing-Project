{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "572619f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "### START FUNCTION\n",
    "\n",
    "class FieldDataProcessor:\n",
    "    \"\"\"\n",
    "    A class for processing field data.\n",
    "\n",
    "    Parameters:\n",
    "    - config_params (dict): A dictionary containing configuration parameters.\n",
    "    - logging_level (str): The logging level to use. Default is \"INFO\".\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, config_params, logging_level=\"INFO\"):\n",
    "        \"\"\"\n",
    "        Initializes the FieldDataProcessor instance.\n",
    "\n",
    "        Args:\n",
    "        - config_params (dict): A dictionary containing configuration parameters.\n",
    "        - logging_level (str): The logging level to use. Default is \"INFO\".\n",
    "        \"\"\"\n",
    "        self.db_path = config_params['db_path']\n",
    "        self.sql_query = config_params['sql_query']\n",
    "        self.columns_to_rename = config_params['columns_to_rename']\n",
    "        self.values_to_rename = config_params['values_to_rename']\n",
    "        self.weather_map_data = config_params['weather_mapping_csv']\n",
    "\n",
    "        self.initialize_logging(logging_level)\n",
    "\n",
    "        self.df = None\n",
    "        self.engine = None\n",
    "\n",
    "    def initialize_logging(self, logging_level):\n",
    "        \"\"\"\n",
    "        Sets up logging for this instance of FieldDataProcessor.\n",
    "\n",
    "        Args:\n",
    "        - logging_level (str): The logging level to use.\n",
    "        \"\"\"\n",
    "        logger_name = __name__ + \".FieldDataProcessor\"\n",
    "        self.logger = logging.getLogger(logger_name)\n",
    "        self.logger.propagate = False\n",
    "\n",
    "        if logging_level.upper() == \"DEBUG\":\n",
    "            log_level = logging.DEBUG\n",
    "        elif logging_level.upper() == \"INFO\":\n",
    "            log_level = logging.INFO\n",
    "        elif logging_level.upper() == \"NONE\":\n",
    "            self.logger.disabled = True\n",
    "            return\n",
    "        else:\n",
    "            log_level = logging.INFO\n",
    "\n",
    "        self.logger.setLevel(log_level)\n",
    "\n",
    "        if not self.logger.handlers:\n",
    "            ch = logging.StreamHandler()\n",
    "            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
    "            ch.setFormatter(formatter)\n",
    "            self.logger.addHandler(ch)\n",
    "\n",
    "    def ingest_sql_data(self):\n",
    "        \"\"\"\n",
    "        Ingests data from an SQL database.\n",
    "        \"\"\"\n",
    "        self.engine = create_db_engine(self.db_path)\n",
    "        self.df = query_data(self.engine, self.sql_query)\n",
    "        self.logger.info(\"Successfully loaded data.\")\n",
    "        return self.df\n",
    "\n",
    "    def rename_columns(self):\n",
    "        \"\"\"\n",
    "        Renames columns in the DataFrame.\n",
    "        \"\"\"\n",
    "        column1, column2 = list(self.columns_to_rename.keys())[0], list(self.columns_to_rename.values())[0]\n",
    "\n",
    "        temp_name = \"__temp_name_for_swap__\"\n",
    "        while temp_name in self.df.columns:\n",
    "            temp_name += \"_\"\n",
    "\n",
    "        self.logger.info(f\"Swapped columns: {column1} with {column2}\")\n",
    "\n",
    "        self.df = self.df.rename(columns={column1: temp_name, column2: column1})\n",
    "        self.df = self.df.rename(columns={temp_name: column2})\n",
    "\n",
    "    def apply_corrections(self, column_name='Crop_type', abs_column='Elevation'):\n",
    "        \"\"\"\n",
    "        Applies corrections to the DataFrame.\n",
    "\n",
    "        Args:\n",
    "        - column_name (str): The name of the column to apply corrections to. Default is 'Crop_type'.\n",
    "        - abs_column (str): The name of the column to take the absolute value of. Default is 'Elevation'.\n",
    "        \"\"\"\n",
    "        self.df[abs_column] = self.df[abs_column].abs()\n",
    "        self.df[column_name] = self.df[column_name].apply(lambda crop: self.values_to_rename.get(crop, crop))\n",
    "        self.df[column_name] = self.df[column_name].str.strip()\n",
    "\n",
    "    def weather_station_mapping(self):\n",
    "        \"\"\"\n",
    "        Maps weather station data to the DataFrame.\n",
    "        \"\"\"\n",
    "        weather_map_df = read_from_web_CSV(self.weather_map_data)\n",
    "        self.df = self.df.merge(weather_map_df, on='Field_ID', how='left')\n",
    "\n",
    "    def process(self):\n",
    "        \"\"\"\n",
    "        Processes the data by ingesting, renaming columns, applying corrections, mapping weather station data, and dropping unnecessary columns.\n",
    "        Returns the processed DataFrame.\n",
    "        \"\"\"\n",
    "        self.ingest_sql_data()\n",
    "        self.rename_columns()\n",
    "        self.apply_corrections()\n",
    "        self.weather_station_mapping()\n",
    "        self.df = self.df.drop(columns=\"Unnamed: 0\")\n",
    "        return self.df\n",
    "        \n",
    "### END FUNCTION"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
